#!/bin/bash
# ==============================================
# AgentDNS Quick Install Script
# Supports Ubuntu/Debian and CentOS/RHEL
# ==============================================

set -e

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging helpers
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Detect operating system
detect_os() {
    if [[ -f /etc/debian_version ]]; then
        OS="debian"
        log_info "Detected Debian/Ubuntu"
    elif [[ -f /etc/redhat-release ]]; then
        OS="redhat"
        log_info "Detected CentOS/RHEL"
    else
        log_error "Unsupported operating system"
        exit 1
    fi
}

# Install system dependencies
install_system_deps() {
    log_info "Installing system dependencies..."
    
    if [[ "$OS" == "debian" ]]; then
        sudo apt update
        sudo apt install -y python3 python3-pip python3-venv git postgresql postgresql-contrib redis-server curl wget
    elif [[ "$OS" == "redhat" ]]; then
        sudo yum update -y
        sudo yum install -y python3 python3-pip git postgresql-server postgresql-contrib redis curl wget
        sudo postgresql-setup initdb
    fi
}

# Start services
start_services() {
    log_info "Starting database services..."
    
    sudo systemctl enable postgresql redis
    sudo systemctl start postgresql redis
    
    log_success "Database services started"
}

# Setup database
setup_database() {
    log_info "Configuring PostgreSQL database..."
    
    # 生成随机密码
    DB_PASSWORD=$(openssl rand -base64 32)
    
    # 创建数据库和用户
    sudo -u postgres psql << EOF
CREATE DATABASE agentdns;
CREATE USER agentdns WITH PASSWORD '$DB_PASSWORD';
GRANT ALL PRIVILEGES ON DATABASE agentdns TO agentdns;
\q
EOF
    
    echo "DATABASE_PASSWORD=$DB_PASSWORD" > .db_password
    log_success "Database setup completed. Password saved to .db_password"
}

# Install Python dependencies
install_python_deps() {
    log_info "Creating Python virtual environment..."
    
    python3 -m venv venv
    source venv/bin/activate
    
    log_info "Installing Python dependencies..."
    pip install --upgrade pip
    pip install -r requirements.txt
    
    log_success "Python dependencies installed"
}

# Generate configuration
generate_config() {
    log_info "Generating configuration..."
    
    # 读取数据库密码
    DB_PASSWORD=$(cat .db_password | cut -d'=' -f2)
    
    # 生成密钥
    SECRET_KEY=$(python3 -c "import secrets; print(secrets.token_urlsafe(32))")
    ENCRYPTION_KEY=$(python3 -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())")
    
    # 创建 .env 文件
    cat > .env << EOF
# AgentDNS production configuration
# Auto-generated by install script

# Database
DATABASE_URL=postgresql://agentdns:$DB_PASSWORD@localhost:5432/agentdns
REDIS_URL=redis://localhost:6379

# Milvus Vector Database
MILVUS_HOST=localhost
MILVUS_PORT=19530
MILVUS_COLLECTION_NAME=agentdns_services
MILVUS_DIMENSION=2560

# JWT Security
SECRET_KEY=$SECRET_KEY
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# Encryption
ENCRYPTION_KEY=$ENCRYPTION_KEY

# API
API_V1_STR=/api/v1
PROJECT_NAME=AgentDNS
VERSION=1.0.0

# Environment
ENVIRONMENT=production
DEBUG=false

# OpenAI API (optional)
OPENAI_API_KEY=your-openai-api-key
OPENAI_BASE_URL=https://ark.cn-beijing.volces.com/api/v3
OPENAI_EMBEDDING_MODEL=ep-20250610224627-n8hjm
OPENAI_MAX_TOKENS=8000
EOF
    
    log_success "Configuration file generated"
}

# Prepare admin account creation
prepare_admin_account() {
    log_info "Preparing admin account creation script..."
    
    # Database tables are created on first application start
    log_info "Database tables will be created on first service start"
    log_info "After starting the service, run the following to create admin account:"
    log_info "  source venv/bin/activate"
    log_info "  python scripts/create_admin_user.py"
    
    log_success "Admin account script is ready"
}

# Install Milvus
install_milvus() {
    log_info "Installing Milvus vector database..."
    
    if command -v docker &> /dev/null; then
        log_info "Installing Milvus via Docker..."
        wget -q https://github.com/milvus-io/milvus/releases/download/v2.3.4/milvus-standalone-docker-compose.yml -O docker-compose.yml
        docker-compose up -d
        log_success "Milvus started via Docker"
    else
        log_warning "Docker not installed, skipping Milvus installation"
        log_warning "Please install Docker and run:"
        log_warning "  wget https://github.com/milvus-io/milvus/releases/download/v2.3.4/milvus-standalone-docker-compose.yml -O docker-compose.yml"
        log_warning "  docker-compose up -d"
    fi
}

# Create start script
create_start_script() {
    log_info "Creating start script..."
    
    cat > start_agentdns.sh << 'EOF'
#!/bin/bash
# AgentDNS start script

echo "Starting AgentDNS service..."

# 激活虚拟环境
source venv/bin/activate

# 启动服务
uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4
EOF
    
    chmod +x start_agentdns.sh
    log_success "Start script created: ./start_agentdns.sh"
}

# Verify installation
verify_installation() {
    log_info "Verifying installation..."
    
    # Check service status
    systemctl is-active --quiet postgresql && log_success "PostgreSQL is running" || log_error "PostgreSQL is not running"
    systemctl is-active --quiet redis && log_success "Redis is running" || log_error "Redis is not running"
    
    # Check Python env
    source venv/bin/activate
    python -c "from app.core.config import settings; print('Config loaded successfully')" && log_success "Python environment OK" || log_error "Python environment has issues"
    
    log_success "Installation verification completed"
}

# Show completion info
show_completion_info() {
    echo
    echo "=================================="
    log_success "AgentDNS installation completed!"
    echo "=================================="
    echo
    echo "🚀 Start service:"
    echo "   ./start_agentdns.sh"
    echo
    echo "🌐 Endpoints:"
    echo "   http://localhost:8000"
    echo "   http://localhost:8000/docs (API Docs)"
    echo
    echo "👤 Create admin account (run after first start):"
    echo "   source venv/bin/activate"
    echo "   python scripts/create_admin_user.py"
    echo "   "
    echo "   Credentials: admin / agentdns_666"
    echo
    echo "🔧 Important files:"
    echo "   .env              - Environment config"
    echo "   .db_password      - Database password"
    echo "   start_agentdns.sh - Start script"
    echo
    echo "📋 Useful commands:"
    echo "   sudo systemctl status postgresql  - Check PostgreSQL status"
    echo "   sudo systemctl status redis       - Check Redis status"
    echo "   source venv/bin/activate          - Activate Python venv"
    echo
    echo "⚠️  Notes:"
    echo "   1. Keep the .db_password file safe"
    echo "   2. Database tables are created on first start"
    echo "   3. In production, use Nginx reverse proxy and change admin password"
    echo "   4. To use OpenAI features, configure OPENAI_API_KEY in .env"
    echo
}

# Main
main() {
    echo "=================================="
    echo "AgentDNS automated install script"
    echo "=================================="
    echo
    
    detect_os
    install_system_deps
    start_services
    setup_database
    install_python_deps
    generate_config
    install_milvus
    create_start_script
    prepare_admin_account
    verify_installation
    show_completion_info
}

# 运行主函数
main "$@"